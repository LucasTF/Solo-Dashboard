// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  email         String    @unique @db.VarChar(40)
  password      String    @db.VarChar(100)
  isAdmin       Boolean

  @@index([name, email])
}

model Cliente {
  id                    Int             @id @default(autoincrement())
  nome                  String          @db.VarChar(120)
  apelido               String?         @db.VarChar(40)
  cpf                   String?         @unique @db.VarChar(14)
  cnpj                  String?         @unique @db.VarChar(18)
  tipo_logo             String?         @db.VarChar(20)
  logradouro            String?         @db.VarChar(120)
  complemento           String?         @db.VarChar(120)
  bairro                String?         @db.VarChar(80)
  cidade                String?         @db.VarChar(40)
  uf                    String?         @db.Char(2)
  cep                   String?         @db.Char(9)
  email                 String?         @db.VarChar(40)
  fone1                 Int?
  fone2                 Int?
  obraCliente           Obra[]          @relation("Cliente")
  obraProprietario      Obra[]          @relation("Proprietario")

  @@index([nome, cpf, cnpj, logradouro, cep, email])
}

model Arquivo {
  id                    Int       @id @default(autoincrement())
  obra                  Obra      @relation(fields: [obraId], references: [id])
  obraId                Int
  nome                  String    @db.VarChar(40)
  tipo                  String    @db.VarChar(40)
  formato               String    @db.VarChar(5)
  caminho               String    @db.VarChar(100)
  criado_em             DateTime

  @@index([nome, tipo, formato])
}

model Obra {
  id                    Int                               @id @default(autoincrement())
  cod_obra              String                            @unique @db.VarChar(11)
  num_obra              Int
  ano                   Int
  data_inicio           DateTime                          @db.Date
  data_fim              DateTime                          @db.Date
  tipo_logo             String?                           @db.VarChar(20)
  logradouro            String                            @db.VarChar(120)
  lote                  String?
  quadra                String?
  bairro                String                            @db.VarChar(80)
  cidade                String                            @db.VarChar(40)
  uf                    String                            @db.Char(2)
  cep                   String?                           @db.Char(9)
  complemento_logo      String?                           @db.VarChar(120)
  sondagem_percussao    Sondagem_Percussao?
  sondagem_trado        Sondagem_Trado?
  sondagem_rotativa     Sondagem_Rotativa?
  cliente               Cliente                           @relation(name: "Cliente", fields: [clienteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clienteId             Int
  proprietario          Cliente?                          @relation(name: "Proprietario",fields: [proprietarioId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  proprietarioId        Int?
  arquivos              Arquivo[]

  @@index([cod_obra, num_obra, ano, data_inicio, data_fim, logradouro, bairro, cidade, uf, complemento_logo])

}

model Obra_Cancelada {
  id                    Int         @id @default(autoincrement())
  cod_obra              String      @unique @db.VarChar(11)
  num_obra              Int
  ano                   Int
}

model Sondagem_Percussao {
  id                    Int         @id @default(autoincrement())
  furos                 Int
  metros                Float
  obra                  Obra        @relation(fields: [obraId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  obraId                Int         @unique
}

model Sondagem_Trado {
  id                    Int         @id @default(autoincrement())
  furos                 Int
  metros                Float
  obra                  Obra        @relation(fields: [obraId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  obraId                Int         @unique
}

model Sondagem_Rotativa {
  id                    Int         @id @default(autoincrement())
  furos                 Int
  metros_solo           Float
  metros_rocha          Float
  obra                  Obra        @relation(fields: [obraId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  obraId                Int         @unique
}