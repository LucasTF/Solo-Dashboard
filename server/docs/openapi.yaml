openapi: 3.0.3
info:
  title: Solo Dashboard API
  description: |-
    Descrição das rotas e funcionalidades disponíveis na API
  version: 0.5.2

servers:
  - url: http://127.0.0.1:5000/api
    description: Test/Staging server

tags:
  - name: Auth
    description: Rotas associadas à autenticação.
  - name: Obras
    description: Rotas associadas a obras.
  - name: Arquivos
    description: Rotas associadas a arquivos.
  - name: Clientes
    description: Rotas associadas a clientes.
  - name: Usuários
    description: Rotas associadas a usuários.

paths:
  /login:
    post:
      tags:
        - Auth
      summary: Faz a autenticação do usuário na Dashboard via token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        "200":
          description: Retorna um objeto contendo uma mensagem de sucesso em adição a um cookie de autenticação JWT.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: session=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login realizado com sucesso."
        "401":
          description: Email/senha não condizem com dados registrados no banco de dados.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Credenciais inválidas."
  /logout:
    get:
      tags:
        - Auth
      security:
        - cookieAuth: []
      summary: Faz o logout do usuário
      responses:
        "200":
          description: Termina a sessão do usuário.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Logout realizado com sucesso."
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
  /session:
    get:
      tags:
        - Auth
      security:
        - cookieAuth: []
      summary: Retorna informações da sessão do usuário
      responses:
        "200":
          description: Retorna um objeto contendo as informações da sessão do usuário.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
      
  /obras:
    get:
      tags:
        - Obras
      security:
        - cookieAuth: []
      summary: Retorna uma lista de obras paginadas
      parameters:
        - name: search
          in: query
          schema:
            type: string
            minLength: 3
            maxLength: 100
          description: String de busca para parâmetros (cod_obra, tipo_logo, logradouro, complemento_logo, bairro & cidade).
        - name: filter
          in: query
          schema:
            type: string
            minLength: 3
            maxLength: 100
          description: String de filtro para indicar quais campos devem ser usados na busca (cod_obra, endereco, bairro & cidade), separados por ';'.
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
          description: Número da página a ser recuperada.
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 10
            maximum: 100
          description: Número de obras a serem recuperadas por página (máximo 100).
      responses:
        "200":
          description: Retorna um objeto contendo o número total de obras, número total de páginas e um array de obras limitados, por padrão, a 50.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_obras:
                    type: integer
                    example: 50
                  total_pages:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/NumId'
                        - $ref: '#/components/schemas/Obra'
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
                      
  /arquivos/latest:
    get:
      tags:
        - Arquivos
      security:
        - cookieAuth: []
      summary: Retorna uma lista com os 5 últimos arquivos registrados
      responses:
        "200":
          description: Retorna uma lista com os 5 últimos arquivos registrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Arquivo'
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
  /arquivos/{obraId}:
    get:
      tags:
        - Arquivos
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: obraId
          schema:
            type: integer
          required: true
          description: ID da obra a qual o arquivo está associado
      summary: Retorna uma lista de arquivos associados ao ID da obra especificada
      responses:
        "200":
          description: Retorna uma lista de arquivos associados ao ID da obra especificada
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Arquivo'
        "404":
          description: Obra não encontrada.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Obra não encontrada."
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
    post:
      tags:
        - Arquivos
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: obraId
          schema:
            type: integer
          required: true
          description: ID da obra a qual o arquivo será associado
      summary: Insere um arquivo relacionado a uma obra com o ID especificado
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
                tipo:
                  type: string
      responses:
        "201":
          description: Salva o arquivo no servidor de arquivos estáticos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Arquivo salvo com sucesso."
        "400":
          description: Arquivo inválido.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "O arquivo enviado não é válido."
        "404":
          description: Obra não encontrada.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Obra não encontrada."
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
        "403":
          description: Usuário não está autorizado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autorizado a realizar essa operação."
  /arquivos/{arquivoId}:
    delete:
      tags:
        - Arquivos
      security:
        - cookieAuth: []
      summary: Deleta um arquivo com o ID especificado
      parameters:
        - in: path
          name: arquivoId
          schema:
            type: integer
          required: true
          description: ID do arquivo a ser deletado
      responses:
        "200":
          description: Deleta o arquivo com ID especificado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Arquivo deletado com sucesso."
        "404":
          description: Arquivo não encontrado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Arquivo não encontrado."
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
        "403":
          description: Usuário não está autorizado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autorizado a realizar essa operação."
                  
  /clientes:
    get:
      tags:
        - Clientes
      security:
        - cookieAuth: []
      summary: Retorna uma lista de clientes paginados
      parameters:
        - name: search
          in: query
          schema:
            type: string
            minLength: 3
            maxLength: 100
          description: String de busca para parâmetros (nome, email).
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
          description: Número da página a ser recuperada.
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 10
            maximum: 100
          description: Número de usuários a serem recuperadas por página (máximo 100).
      responses:
        "200":
          description: Retorna um objeto contendo o número total de clientes, número total de páginas e um array de clientes limitados, por padrão, a 50.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_obras:
                    type: integer
                    example: 50
                  total_pages:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/NumId'
                        - $ref: '#/components/schemas/Cliente'
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Message'
            example:
              message: "Usuário não está autenticado."
                  
  /users:
    get:
      tags:
        - Usuários
      security:
        - cookieAuth: []
      summary: Retorna uma lista de usuários cadastrados paginados
      parameters:
        - name: search
          in: query
          schema:
            type: string
            minLength: 3
            maxLength: 100
          description: String de busca para parâmetros (nome, email).
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
          description: Número da página a ser recuperada.
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 10
            maximum: 100
          description: Número de usuários a serem recuperadas por página (máximo 100).
      responses:
        "200":
          description: Retorna um objeto contendo o número total de usuários, número total de páginas e um array de usuários limitados, por padrão, a 50.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_obras:
                    type: integer
                    example: 50
                  total_pages:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/NumId'
                        - $ref: '#/components/schemas/User'
                
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Message'
            example:
              message: "Usuário não está autenticado."
    post:
      tags:
        - Usuários
      security:
        - cookieAuth: []
      summary: Cria um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    password:
                      type: string
                      minLength: 6
      responses:
        "201":
          description: Novo usuário criado com sucesso.
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Message'
            example:
              message: "Usuário registrado com sucesso."
        "400":
          description: Email/Senha inserido é inválido.
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Message'
            example:
              message: "Email/Senha inválido."
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Message'
            example:
              message: "Usuário não está autenticado."
        "403":
          description: Usuário não está autorizado.
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Message'
            example:
              message: "Usuário não está autorizado a realizar essa operação."
  /users/{userId}:
    get:
      tags:
        - Usuários
      security:
        - cookieAuth: []
      summary: Retorna informações referentes ao usuário com o ID especificado
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID do usuário
      responses:
        "200":
          description: Retorna um objeto com os dados de um usuário
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NumId'
                  - $ref: '#/components/schemas/User'
        "404":
          description: Usuário não encontrado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não encontrado."
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
        "403":
          description: Usuário não está autorizado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autorizado a realizar essa operação."
    put:
      tags:
        - Usuários
      security:
        - cookieAuth: []
      summary: Atualiza dados básicos do usuário com o ID especificado
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                isAdmin:
                  type: boolean
      responses:
        "200":
          description: Usuário atualizado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário atualizado com sucesso."
        "404":
          description: Usuário não encontrado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não encontrado."
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
        "403":
          description: Usuário não está autorizado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autorizado a realizar essa operação."
    delete:
      tags:
        - Usuários
      security:
        - cookieAuth: []
      summary: Deleta usuário com o ID especificado
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID do usuário
      responses:
        "200":
          description: Usuário deletado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário deletado com sucesso."
        "404":
          description: Usuário não encontrado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não encontrado."
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
        "403":
          description: Usuário não está autorizado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autorizado a realizar essa operação."
  /users/chpass/{userId}:
    put:
      tags:
        - Usuários
      security:
        - cookieAuth: []
      summary: Atualiza a senha do usuário com o ID especificado
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        "200":
          description: Senha atualizada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Senha atualizada com sucesso."
        "400":
          description: Senha inválida.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "A senha deve conter, pelo menos, 6 caracteres."
        "404":
          description: Usuário não encontrado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não encontrado."
        "401":
          description: Usuário não está autenticado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autenticado."
        "403":
          description: Usuário não está autorizado.
          content:
           application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Usuário não está autorizado a realizar essa operação."

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session

  schemas:
    Auth:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    User:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 40
        isAdmin:
          type: boolean
          default: false
    Arquivo:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        obraId:
          type: integer
          minimum: 1
        nome:
          type: string
          maxLength: 40
        formato:
          type: string
          maxLength: 5
        criado_em:
          type: string
          format: date-time
        tipo:
          type: string
          maxLength: 40
        link:
          type: string
          format: uri
    Cliente:
      type: object
      properties:
        nome:
          type: string
          maxLength: 120
    Obra:
      type: object
      properties:
        cod_obra:
          type: string
          minLength: 6
          maxLength: 11
        num_obra:
          type: integer
          minimum: 1
          maximum: 999
        ano:
          type: integer
        data_inicio:
          type: string
          format: date
        data_fim:
          type: string
          format: date
        tipo_logo:
          type: string
          nullable: true
          maxLength: 20
        logradouro:
          type: string
          maxLength: 120
        lote:
          type: string
          nullable: true
        quadra:
          type: string
          nullable: true
        bairro:
          type: string
          maxLength: 80
        cidade:
          type: string
          maxLength: 40
        uf:
          type: string
          minLength: 2
          maxLength: 2
        cep:
          type: string
          nullable: true
          minLength: 9
          maxLength: 9
        complemento_logo:
          type: string
          nullable: true
          maxLength: 120
        sondagem_percussao:
          type: object
          nullable: true
          properties:
            furos:
              type: integer
              minimum: 0
            metros:
              type: number
              minimum: 0
        sondagem_trado:
          type: object
          nullable: true
          properties:
            furos:
              type: integer
              minimum: 0
            metros:
              type: number
              minimum: 0
        sondagem_rotativa:
          type: object
          nullable: true
          properties:
            furos:
              type: integer
              minimum: 0
            metros_solo:
              type: number
              minimum: 0
            metros_rocha:
              type: number
              minimum: 0
        arquivos:
          type: array
          items:
            $ref: '#/components/schemas/Arquivo'
    Message:
      type: object
      properties:
        message:
          type: string
    NumId:
      type: object
      properties:
        id:
          type: number
          minimum: 1